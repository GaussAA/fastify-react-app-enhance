generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  avatar      String?
  phone       String?
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  userRoles   UserRole[]
  auditLogs   AuditLog[]
  sessions    UserSession[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]

  @@map("users")
}

// 角色模型
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  displayName String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  userRoles   UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

// 权限模型
model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  displayName String
  description String?
  resource    String   // 资源类型，如：user, role, permission
  action      String   // 操作类型，如：create, read, update, delete
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

// 用户角色关联表
model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  assignedAt DateTime @default(now())
  assignedBy Int?     // 分配者ID
  expiresAt DateTime? // 角色过期时间

  // 关联关系
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// 角色权限关联表
model RolePermission {
  id           Int      @id @default(autoincrement())
  roleId       Int
  permissionId Int
  grantedAt    DateTime @default(now())
  grantedBy    Int?     // 授权者ID

  // 关联关系
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// 用户会话模型
model UserSession {
  id           Int      @id @default(autoincrement())
  userId       Int
  token        String   @unique
  refreshToken String?  @unique
  deviceInfo   String?  // 设备信息
  ipAddress    String?  // IP地址
  userAgent    String?  // 用户代理
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  lastUsedAt   DateTime @default(now())
  createdAt    DateTime @default(now())

  // 关联关系
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// 审计日志模型
model AuditLog {
  id          Int      @id @default(autoincrement())
  userId      Int?
  action      String   // 操作类型
  resource    String   // 资源类型
  resourceId  String?  // 资源ID
  details     Json?    // 详细信息
  ipAddress   String?  // IP地址
  userAgent   String?  // 用户代理
  timestamp   DateTime @default(now())

  // 关联关系
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// 密码重置令牌模型
model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // 关联关系
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

// 邮箱验证令牌模型
model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // 关联关系
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}
